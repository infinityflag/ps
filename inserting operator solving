#include <iostream>
#include <algorithm>
#include <iomanip>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <stdlib.h>
#include <cstring>
#include <cmath>
#include <math.h>
#include <string>
typedef long long ll;
using namespace std;
//char a[100];
int a[1000000];
int sy[5];
int f(int idx,int sum, int plus, char c){
    f(idx, i+1,);
    for(int i=0;i<4;i++){
        if(sy[i]){
            f(idx+1, sum, plus, c);


            sy[i]--;
        }
        f(idx+1,sum + a[i], );
        f(idx+1,sum - a[i], );
    }
}


int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    int n,m;
    cin >> n >> m;
    for(int i=0;i<4;i++){
        cin >> sy[i];
    }
}




second try 


#include <iostream>
#include <algorithm>
#include <iomanip>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <stdlib.h>
#include <cstring>
#include <cmath>
#include <math.h>
#include <string>
typedef long long ll;
using namespace std;
//char a[100];
int a[1000000];
int sy[5];
int n,m;
int maxn = -1e9;
int minn = 1e9;
int ret1 = -1e9;
int ret2 = 1e9;
void f(int idx){
    int sum = a[0];
    if(idx == n){
        maxn = max(sum, maxn);
        minn = min(minn, sum);
        return;
    }
    for(int i=0;i<4;i++){
        int ii; 
        if(sy[i]>0){
            if(i==0){
                sum += a[i+1]; 
                sy[0]--;
                ii=0;
            }
            if(i==1){
                sum -= a[i+1];
                sy[1]--;
                ii=1;
            }
            if(i==2){
                sum *= a[i+1];
                sy[2]--;
                ii=2;
            }
            if(i==3){
                sum /= a[i+1];
                sy[3]--;
                ii=3;
            }
        }
        //sy[i]--; 
        f(idx+1);
        sy[ii]++;
        ret1 = max(ret1, sum);
        ret2 = min(ret2, sum);
        //sy[i]++;
    }
}


int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    cin >> n;
    for(int i=0;i<n;i++){
        cin >> a[i];
    }
    for(int i=0;i<4;i++){
        cin >> sy[i];
    }
    f(0);
    cout << ret1<< '\n' << ret2;
}



third try....
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <stdlib.h>
#include <cstring>
#include <cmath>
#include <math.h>
#include <string>
typedef long long ll;
using namespace std;
//char a[100];
int a[1000000];
int sy[5];
int n,m;
int maxn = -1e9;
int minn = 1e9;
int ret1 = -1e9;
int ret2 = 1e9;
int sum = 0;
void f(int idx){//idx번째의 수에 남은 toPick 개의 수를 모두 고르는 경우의 수
    if(idx == n-1){
        return;
    }
    for(int i=0;i<4;i++){
        if(sy[i]>0){
            if(i==0){
                sum += a[idx];
                sy[0]--;
            }
            if(i==1){
                sum -= a[idx];
                sy[1]--;
            }
            if(i==2){
                sum *= a[idx];
                sy[2]--;
            }
            if(i==3&& idx > 1){
                sum = a[idx-1]/a[idx];
                sy[3]--;
            }
            f(idx+1);
            sy[i]++;
            ret1 = max(ret1, sum);
            ret2 = min(ret2, sum);
        }
        //sy[i]++;
    }
}


int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    cin >> n;
    for(int i=0;i<n;i++){
        cin >> a[i];
    }
    sum = a[0];
    for(int i=0;i<4;i++){
        cin >> sy[i];
    }
    f(0);
    cout << ret1<< '\n' << ret2;
}




forth try
#include <iostream>
#include <algorithm>
#include <iomanip>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <stdlib.h>
#include <cstring>
#include <cmath>
#include <math.h>
#include <string>
typedef long long ll;
using namespace std;
int a[1000000];
int sy[5];
int n,m;
int maxn = -1e9;
int minn = 1e9;
int ret1 = -1e9;
int ret2 = 1e9;
int sum = 0;
void f(int idx){//idx번째의 수에 남은 toPick 개의 수를 모두 고르는 경우의 수
    if(idx == n-1){
        maxn = max(maxn, sum);
        minn = min(minn, sum);
    }
    for(int i=0;i<4;i++){
        if(sy[i]>0){
            if(i==0){
                sum += a[idx];
            }
            if(i==1){
                sum -= a[idx];
            }
            if(i==2){
                sum *= a[idx];
            }
            if(i==3){
                sum /= a[idx];
            }
            sy[i]--;
            f(idx+1);
            sy[i]++;
        }
    }
}


fifth try -> ac

#include <iostream>
#include <algorithm>
#include <iomanip>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <cstdlib>
#include <cstdio>
#include <vector>
#include <stdlib.h>
#include <cstring>
#include <cmath>
#include <math.h>
#include <string>
typedef long long ll;
using namespace std;
int a[1000000];
int sy[5];
int n,m;
int maxn = -1e9;
int minn = 1e9;
int sum;//너무 복잡하다..
//그런데 이게 만약 그렇게 된다면..
int cal(int i, int idx, int ret){
    if(i == 0){
        return ret + a[idx];
    }
    if(i == 1){
        return ret - a[idx];
    }
    if(i == 2){
        return ret * a[idx];
    }
    return ret / a[idx];
}
void f(int idx, int ret){
    if(idx == n){
        maxn = max(maxn, ret);
        minn = min(minn, ret);
        return;
    }
    for(int i=0;i<4;i++){
        if(sy[i]>0){
            //p의 값을 누적을 하면 다르지 않은 결과
            sy[i]--;
            f(idx+1, cal(i,idx,ret));
            sy[i]++;
        }
    }
}
int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    cin >> n;
    for(int i=0;i<n;i++){
        cin >> a[i];
    }
    for(int i=0;i<4;i++){
        cin >> sy[i];
    }
    f(1,a[0]);
    cout << maxn <<'\n' << minn;
}



int main() {
    ios_base::sync_with_stdio(0); cin.tie(0);
    cin >> n;
    for(int i=0;i<n;i++){
        cin >> a[i];
    }
    sum = a[0];
    for(int i=0;i<4;i++){
        cin >> sy[i];
    }
    f(0);
    cout << maxn <<'\n' << minn;
}

