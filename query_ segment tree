#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
typedef long long ll;
using namespace std;
#define SIZE (1<<16)
int arr[1000001];
int tree[4*1000001];

struct segTree{
    int update(int X, int V, int node, int S, int E){
        if(S == E){
            return tree[node] = V;
        }
        if (V < S && E < X) {
            return tree[node];
        }
        int mid = (S+E)/2;
        //if(X <= mid) update(X,V,2*node,S,mid);
        //else update(X,V,2*node+1, mid, E);
        //return tree[node] = tree[2*node]+tree[2*node+1];
        return tree[node] = update(X,V,2*node,S,mid) + update(X,V,2*node+1,mid, E);
    }
    int query(int L, int R, int node, int S, int E){
        if(R < S || E < L) return 0;
        if(L <= S && R <= E) return tree[node];
        int mid = (L+R)/2;
        return query(L,R, 2*node, S, mid)+query(L,R,2*node+1,mid+1,E);
    }
    int init(int l, int r, int node){
        if(l==r) return tree[node] = arr[l];
        int mid = (l+r)/2;
        return tree[node] = min(init(l, mid, 2*node), init(mid+1, r, 2*node+1));
    }
} seg;

int main(){
    int n,m,c;
   cin >> n >> m >> c;
   for(int i=1;i<=n;i++){
      cin >>tree[i];
   }
   seg.init(1,n,1);
   for(int i=1;i<=m+c;i++){
      int a,b,c;
      cin >> a >> b >> c;
      if(a==1) seg.update(b,c,1,1,n);
      if(a==2) cout << seg.query(b,c,1,1,n)<<'\n';
   }
}

